import type { NextPage, GetStaticProps } from 'next';
import Head from 'next/head';
import classes from '../styles/Home.module.scss';
import { Navbar, Searchbar, Statistics, Blocks, Transactions } from '../components';


const Home: NextPage = ({ infura, ethPrice, transactions }: any) => {

  // console.log('infura', infura);

  // web3
  // const Web3 = require('web3');

  // // Alchemy
  // const { createAlchemyWeb3 } = require("@alch/alchemy-web3");
  // // // Using HTTPS
  // const web3 = createAlchemyWeb3(`https://eth-mainnet.alchemyapi.io/${process.env.ALCHEMY_API_KEY}`);
  // var web3 = new Web3(Web3.currentProvider || 'http://localhost:3000');
  // console.log(web3.currentProvider);

  
  // // Many web3.js methods return promises.
  // web3.eth.getBlock("latest").then(block => {
  //   console.log(block);
  // });


  return (
    <div className={classes.container}>
      <Head>
        <title>Etherskan</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://i.icomoon.io/public/temp/4dd956f873/UntitledProject/style-svg.css" />
        <script defer src="https://i.icomoon.io/public/temp/4dd956f873/UntitledProject/svgxuse.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@alch/alchemy-web3@latest/dist/alchemyWeb3.min.js"></script>
      </Head>
      <header className={classes.navbar}>
        <Navbar />
      </header>
      <main className={classes.main}>
        <section className={classes.searchbarSection}>
          <Searchbar />
        </section>
        <section>
          <Statistics ethPrice={ethPrice} />
        </section>
        <section className={classes.blockTransactionSection}>
          <div className={classes.blocks}>
            <Blocks />
          </div>
          <div className={classes.transactions}>
            <Transactions transactions ={transactions}/>
          </div>
        </section>
      </main>
    </div>
  )
}


export async function getStaticProps(context: any) {
  const { params } = context;
  const Web3 = require('web3');

  const { createAlchemyWeb3 } = require("@alch/alchemy-web3");
  const web3 = createAlchemyWeb3(`https://eth-rinkeby.alchemyapi.io/v2/${process.env.ALCHEMY_API_KEY}`);
  // const blockNumber = await web3.eth.getBlock('latest');
  // console.log("The latest block number is " + JSON.stringify(blockNumber.transactions));

  const [infuraRes, ethPriceRes, transactionsRes] = await Promise.all([
    fetch(`https://rinkeby.infura.io/v3/${process.env.INFURA_PROJECT_ID}`, {
      body: '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}',
      headers: {
        "Content-Type": "application/json"
      },
      method: "POST"
    }),
    fetch("https://coinranking1.p.rapidapi.com/coin/razxDUgYGNAdQ?referenceCurrencyUuid=yhjMzLPhuIDl&timePeriod=24h", {
      "method": "GET",
      "headers": {
        "x-rapidapi-host": "coinranking1.p.rapidapi.com",
        "x-rapidapi-key": `${process.env.RAPID_API_KEY}`,
      }
    }),
    web3.eth.getBlock('latest'),
  ])

  const [infura, ethPrice, transactions] = await Promise.all([
    infuraRes.json(),
    ethPriceRes.json(),
    transactionsRes.transactions,
  ])
  return {
    props: {
      infura,
      ethPrice,
      transactions,
    }
  }
}

export default Home
